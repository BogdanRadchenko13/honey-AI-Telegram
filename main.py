import threading
import telebot  
import g4f  
import re
from PIL import Image
import pytesseract
import io  
from flask import Flask
import requests
  
# üîê –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞  
bot = telebot.TeleBot("7475051001:AAFUXqOC6UkdmjqKUleGLyNBjo0DCLIew50")  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π  
OPENWEATHER_API_KEY = "397404f6e2154b5697d1ac3ddb51da5b"

# üß† –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  
user_memory = {}  
  
# üé® –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞  
def stylize_response(text):  
    text = text.replace("ChatGPT", "Honey AI")  
    text = text.replace("OpenAI", "Honey Tech")  
    text = re.sub(r'\n{2,}', '\n', text)  
    sentences = re.split(r'(?<=[.?!])\s+', text)  
  
    blocks = []  
    block = []  
  
    for sentence in sentences:  
        block.append(sentence)  
        if len(block) == 2:  
            paragraph = ' '.join(block).strip()  
            match = re.match(r"^([^\s]{2,}(?:\s+[^\s]{2,}){0,2})", paragraph)  
            if match:  
                bold_part = f"<b>{match.group(1)}</b>"  
                paragraph = bold_part + paragraph[len(match.group(1)):]  
            blocks.append(paragraph)  
            block = []  
  
    if block:  
        paragraph = ' '.join(block).strip()  
        match = re.match(r"^([^\s]{2,}(?:\s+[^\s]{2,}){0,2})", paragraph)  
        if match:  
            bold_part = f"<b>{match.group(1)}</b>"  
            paragraph = bold_part + paragraph[len(match.group(1)):]  
        blocks.append(paragraph)  
  
    final_text = '\n\n'.join(blocks)  
    final_text = re.sub(r"`([^`]+)`", r"<code>\1</code>", final_text)  
    return final_text  

def smart_search(query):
    # 1Ô∏è‚É£ Wikipedia
    if query.lower().startswith("—á—Ç–æ —Ç–∞–∫–æ–µ") or query.lower().startswith("–∫—Ç–æ —Ç–∞–∫–æ–π"):
        result = search_wikipedia(query)
        if result:
            return f" <b> Wikipedia:</b>\n\n{result}"

    # 2Ô∏è‚É£ –ü–æ–≥–æ–¥–∞
    if "–ø–æ–≥–æ–¥–∞" in query.lower() or "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞" in query.lower():
        result = search_weather(query)
        if result:
            return f" <b>–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã:</b>\n\n{result}"

    # 3Ô∏è‚É£ DuckDuckGo
    result = search_duckduckgo(query)
    if result:
        return f" <b>DuckDuckGo:</b>\n\n{result}"

    return " ERROR: Nothing found."

def search_wikipedia(query):
    title = query.replace("—á—Ç–æ —Ç–∞–∫–æ–µ", "").replace("–∫—Ç–æ —Ç–∞–∫–æ–π", "").strip()
    url = f"https://ru.wikipedia.org/api/rest_v1/page/summary/{title.replace(' ', '_')}"
    res = requests.get(url)
    if res.status_code == 200:
        data = res.json()
        return data.get("extract")
    return None

def search_weather(query):
    city_match = re.search(r"(–≤|—É|–ø–æ)\s([–ê-–Ø–∞-—èA-Za-z\- ]+)", query)
    city = city_match.group(2).strip() if city_match else "–ö–∏–µ–≤"

    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
    res = requests.get(url)
    if res.status_code == 200:
        data = res.json()
        temp = data["main"]["temp"]
        desc = data["weather"][0]["description"]
        return f"{city}: {temp}¬∞C, {desc}"
    return None

def search_duckduckgo(query):
    url = f"https://api.duckduckgo.com/?q={query}&format=json&no_html=1"
    res = requests.get(url).json()
    if res.get("AbstractText"):
        return res["AbstractText"]
    elif "RelatedTopics" in res and res["RelatedTopics"]:
        return res["RelatedTopics"][0].get("Text")
    return None

# üî∏ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ  
@bot.message_handler(commands=['start'])  
def send_welcome(message):  
    name = f"{message.from_user.first_name or ''} {message.from_user.last_name or ''}".strip()  
    pic = 'https://i.postimg.cc/V6dnfVr5/file-00000000dd7461f4b9c5afdddf9102c0.png'  
    caption = f" –ü—Ä–∏–≤–µ—Ç, {name}!\n\n –≠—Ç–æ –ß–∞—Ç-–ë–æ—Ç —Å –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º –ø—Ä—è–º–æ –≤ Telegram! –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è –≤–æ–ø—Ä–æ—Å, –∏ –Ω–∞—à –ò–ò –æ—Ç–≤–µ—Ç–∏—Ç."  
    bot.send_photo(message.chat.id, photo=pic, caption=caption)  

app = Flask('')

@app.route('/')
def home():
    return "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

def run():
    app.run(host='0.0.0.0', port=8080)

# --- –ó–∞–ø—É—Å–∫ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ ---
def keep_alive():
    t = threading.Thread(target=run)
    t.start()

# ‚ôªÔ∏è –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏  
@bot.message_handler(commands=['reset'])  
def reset_memory(message):  
    user_memory.pop(message.from_user.id, None)  
    bot.send_message(message.chat.id, " ‚ôªÔ∏è –ü–∞–º—è—Ç—å —Å–±—Ä–æ—à–µ–Ω–∞.")  

@bot.message_handler(commands=['code'])
def handle_code_request(message):
    user_input = message.text.replace("/code", "").strip()

    if not user_input:
        bot.reply_to(message, "ERROR: Enter offer after /code")
        return

    loading = bot.send_message(message.chat.id, "–ó–∞–ø—Ä–æ—Å –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è...")

    try:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫–∞–∫ –∫ –ò–ò
        messages = [
            {"role": "system", "content": "–¢—ã ‚Äî HoneyAI. –¢—ã –ø–∏—à–µ—à—å —á–∏—Å—Ç—ã–π, –ø–æ–Ω—è—Ç–Ω—ã–π –∫–æ–¥ –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞. –ü—Ä–æ—Å—Ç–æ –∫–æ–¥."},
            {"role": "user", "content": user_input}
        ]

        response = g4f.ChatCompletion.create(
            model=g4f.models.default,
            messages=messages
        )

        bot.delete_message(message.chat.id, loading.message_id)

        # –ï—Å–ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ —É–∂–µ –µ—Å—Ç—å –±–ª–æ–∫ –∫–æ–¥–∞ ‚Äî –æ—Å—Ç–∞–≤–∏–º, –∏–Ω–∞—á–µ –æ–±–µ—Ä–Ω—ë–º –≤—Ä—É—á–Ω—É—é
        if "```" not in response:
            formatted = f"<pre><code>{response}</code></pre>"
        else:
            # –ó–∞–º–µ–Ω—è–µ–º Markdown –±–ª–æ–∫–∏ –Ω–∞ HTML
            formatted = response.replace("```python", "<pre><code>").replace("```", "</code></pre>")

        bot.send_message(message.chat.id, formatted, parse_mode="HTML")

    except Exception as e:
        bot.delete_message(message.chat.id, loading.message_id)
        bot.send_message(message.chat.id, f" ERROR: {e}")

@bot.message_handler(commands=['search'])
def handle_search(message):
    query = message.text.replace("/search", "").strip()
    if not query:
        bot.reply_to(message, "‚ùó –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /search.")
        return
    bot.send_chat_action(message.chat.id, 'typing')
    reply = smart_search(query)
    bot.send_message(message.chat.id, reply, parse_mode="HTML")

@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    loading = bot.send_message(message.chat.id, " –ó–∞–ø—Ä–æ—Å –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è...")

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        file_id = message.photo[-1].file_id
        file_info = bot.get_file(file_id)
        downloaded_file = bot.download_file(file_info.file_path)

        image = Image.open(io.BytesIO(downloaded_file))

        # –†–∞—Å–ø–æ–∑–Ω–∞—ë–º —Ç–µ–∫—Å—Ç
        extracted_text = pytesseract.image_to_string(image, lang='eng+rus')

        if message.caption:
            prompt = f"{message.caption.strip()}\n\n–í–æ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è:\n{extracted_text.strip()}"
        else:
            prompt = f"–†–µ—à–∏ —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ:\n{extracted_text.strip()}"

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
        user_id = message.from_user.id
        if user_id not in user_memory:
            user_memory[user_id] = [
                {"role": "system", "content": "Your name is honeyAI. You don't have to mention that you are ChatGPT or openAI. You help with code, schoolwork, and ideas."}
            ]

        user_memory[user_id].append({"role": "user", "content": prompt})

        response = g4f.ChatCompletion.create(
            model=g4f.models.default,
            messages=user_memory[user_id]
        )

        user_memory[user_id].append({"role": "assistant", "content": response})

        bot.delete_message(message.chat.id, loading.message_id)

        reply = stylize_response(response)
        bot.send_message(message.chat.id, reply, parse_mode="HTML")

    except Exception as e:
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            bot.delete_message(message.chat.id, loading.message_id)
        except:
            pass
        bot.send_message(message.chat.id, f" ERROR: {str(e)}")

# üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤ —Å –ø–∞–º—è—Ç—å—é  
@bot.message_handler(content_types=['text'])  
def handle_text(message):  
    try:
        user_id = message.from_user.id  
        user_input = message.text.strip()  
  
        Loading_message = bot.reply_to(message, " –ó–∞–ø—Ä–æ—Å –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è...")

        if message.text.lower() == "/reset":  
            reset_memory(message)  
            return  
  
        if user_id not in user_memory:  
            user_memory[user_id] = [  
                {"role": "system", "content": "Your name is honeyAI. You were created by the company honey Studio, and more specifically - Bogdan Radchenko. You don't have to mention that you are ChatGPT or openAI. You easily help with codes and homework. You can: generate texts, come up with ideas, are good at computer science, etc. You know and can speak 50 languages of the world, including: English, Russian, Ukrainian, French, Spanish, German, Chinese, Japanese, Korean, Arabic, Polish, Czech, Serbian, Bulgarian."}  
            ]  
  
        user_memory[user_id].append({"role": "user", "content": user_input})  
  
        try:  
            response = g4f.ChatCompletion.create(  
                model=g4f.models.default,  
                messages=user_memory[user_id]  
            )  
  
            user_memory[user_id].append({"role": "assistant", "content": response})  
  
            reply = stylize_response(response)  
        
            bot.delete_message(message.chat.id, Loading_message.message_id)

            bot.send_message(message.chat.id, reply, parse_mode="HTML")  
  
        except Exception as e:  
            bot.delete_message(message.chat.id, Loading_message.message_id)
            bot.send_message(message.chat.id, f" ERROR: {str(e)}")  
    finally:
        print("[ OK ] Service restarted.")
  
# ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫  
keep_alive()
bot.polling(none_stop=True)
